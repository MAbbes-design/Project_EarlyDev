
name: SecOps Pipeline 

on: 
  workflow_run: 
   workflows: ["Code Quality"] # runs after the linting is complete.
   types:
     - completed     
   
permissions:
  contents: read
  security-events: write
  
jobs: 
  security_scan: 
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup .NET # Install .NET runtime for security checks
      uses: actions/setup-dotnet@v4      
      with:
        dotnet-version: 8.0.x

    - name: Install Android Workloads
      run: dotnet workload install maui-android # sets up MAUI android workload

    - name: Restore dependencies
      run: |
         dotnet --version
         dotnet restore 
         
    - name: Install OWASP Dependency-Check #OWASP Dependency-Check for NuGet Vulnerabilities
      run: |
        wget https://github.com/jeremylong/DependencyCheck/releases/download/v12.1.0/dependency-check-12.1.0-release.zip
        unzip dependency-check-12.1.0-release.zip
        chmod +x dependency-check/bin/dependency-check.sh

    - name: Set suppression file permissions
      run: chmod 644 /home/runner/work/Project_EarlyDev/Project_EarlyDev/suppression.xml
        
    - name: Run Dependency-Check with NVD key #scans my dependencies
      run: ./dependency-check/bin/dependency-check.sh --project "EarlyDevSecurityScan" --out reports --scan /home/runner/work/Project_EarlyDev/Project_EarlyDev/EarlyDev_App /home/runner/work/Project_EarlyDev/Project_EarlyDev/EarlyDevTests --nvdApiKey ${{ secrets.NVD_API_KEY }} --suppression /home/runner/work/Project_EarlyDev/Project_EarlyDev/suppression.xml --failOnCVSS 9.0

    - name: Install Gitleaks 
      run: |
        curl -sSfL https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks_8.26.0_linux_x64.tar.gz -o gitleaks.tar.gz
        tar -xzf gitleaks.tar.gz
        chmod +x gitleaks
        mv gitleaks /usr/local/bin/
        
    - name: Run Gitleaks Secret Scan # Scans for leaked secrets in my codebase
      run: gitleaks detect --source . --redact

    - name: Enforce Security Before Deployment # Blocks merging if vulnerabilities exist in either the .NET packages or OWASP scan
      run: |
        dotnet list package --vulnerable
        if [ $? -ne 0 ]; then
          echo "Vulnerable dependencies detected! Merge blocked."
          exit 1
        fi
        if grep -i "CRITICAL" reports/dependency-check-report.html; then
          echo "Critical vulnerabilities found, Merge will be blocked."
          exit 1
        fi
    
    - name: Complete SecOps Checks # Confirm that all security checks have completed
      run: echo "Security checks completed!"
